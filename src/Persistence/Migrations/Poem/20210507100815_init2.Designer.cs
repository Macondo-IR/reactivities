// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

namespace Persistence.Migrations.Poem
{
    [DbContext(typeof(PoemContext))]
    [Migration("20210507100815_init2")]
    partial class init2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Poem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("PoemId")
                        .HasColumnType("int");

                    b.Property<Guid>("PoemIndexId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.Property<int>("SortId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Vorder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PoemIndexId");

                    b.ToTable("Poems");
                });

            modelBuilder.Entity("Domain.PoemIndex", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("MainTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PoemIndexId")
                        .HasColumnType("int");

                    b.Property<Guid>("PoetMasterpieceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PoetMasterpieceId");

                    b.ToTable("PoemIndices");
                });

            modelBuilder.Entity("Domain.Poet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Poets");
                });

            modelBuilder.Entity("Domain.PoetMasterpiece", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PoetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PoetId");

                    b.ToTable("PoetMasterpieces");
                });

            modelBuilder.Entity("Domain.Poem", b =>
                {
                    b.HasOne("Domain.PoemIndex", "PoemIndex")
                        .WithMany("Poems")
                        .HasForeignKey("PoemIndexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PoemIndex");
                });

            modelBuilder.Entity("Domain.PoemIndex", b =>
                {
                    b.HasOne("Domain.PoetMasterpiece", "PoetMasterpiece")
                        .WithMany("PoemIndices")
                        .HasForeignKey("PoetMasterpieceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PoetMasterpiece");
                });

            modelBuilder.Entity("Domain.PoetMasterpiece", b =>
                {
                    b.HasOne("Domain.Poet", "Poet")
                        .WithMany("PoetMasterpieces")
                        .HasForeignKey("PoetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Poet");
                });

            modelBuilder.Entity("Domain.PoemIndex", b =>
                {
                    b.Navigation("Poems");
                });

            modelBuilder.Entity("Domain.Poet", b =>
                {
                    b.Navigation("PoetMasterpieces");
                });

            modelBuilder.Entity("Domain.PoetMasterpiece", b =>
                {
                    b.Navigation("PoemIndices");
                });
#pragma warning restore 612, 618
        }
    }
}
